graph = [
    [],
    [2,3,8],
    [1,7],
    [1,4,5],
    [3,5],
    [3,4],
    [7],
    [2,6,8],
    [1,7]
]

# 1번 노드를 시작 노드로 하고, 1번 노드를 표현하는 1번 인덱스의 리스트가 [2,3,8] 인 것은 1번 노드와 2,3,8번 노드가 간선으로 연결된 상태의 그래프를 표현하는 것이다.
# 2번 노드는 마찬가지로 1,7번 노드와 간선으로 연결된 상태의 그래프를 표현한다.
# 3번 노드는 1,4,5번 노드와 간선으로 연결된 상태이다.

visited = [False]*9

# 위의 그래프는 8개의 노드가 존재하는 그래프를 표현하는데, 이 경우 인덱스 번호가 노드 번호를 표현하도록 하기 위해 0번 인덱스에 False 대응시킨다.

def dfs(graph,start,visited):

    visited[start] = True

# 시작노드의 번호를 표현하는 v를 방문노드의 순서를 표현하는 visited 리스트의 인덱스에 대응시켜 그 값을 False에서 True로 치환하여 v번 노드가 방문됐음을 표현한다.

    print(start, end=' ')

# 현재 방문한 노드 v 번째 노드를 출력하여 현재 방문했음을 표현한다.

    for i in graph[start]:

# i에는 v 번째 노드와 연결된 노드의 번호가 할당되게 된다. 이 경우 v 는 1이고 1번 노드와 연결된 노드의 번호를 표현하는 리스트[2,3,8] 을 graph[1] 이 표현하므로, 결과적으로 i에는 2, 3, 8이 순서대로 할당되게 된다.

        if not visited[i]:

# 현재 visited 리스트에는 최초로 방문한 1번째 노드인 1번째 인덱스 값을 제외하고는 모두 False 로 할당되어 있는데, 만약 i번째 인덱스의 값이 방문되지 않아서 False로 결정되어 있다면 위의 조건문의 not에 의해 True로 표현되게 되어 조건문이 실행되게 된다. 즉, i번째 노드가 방문되지 않은 상태라면

            dfs(graph,i,visited)

# 다시 i를 시작 노드로 하고, 그래프 graph에 대해서 현재 1번째 인덱스만 True 상태인 visited를 방문리스트로 하여 다시 dfs 함수를 실행하게 되면, visited[i] = True가 실행되게 되어 i번째 인덱스가 표현하는 i번째 노드가 방문처리가 되고,
# 다시 graph[i] 가 표현하는 i번째 노드와 연결된 노드의 리스트가 다시 i에 순서대로 대응되게 되고, 이때 i가 방문되지 않은 노드라면 다시 i를 시작노드로 하는 dft를 실행되게 한다.

# 즉, 결과적으로, i가 방문된 노드의 상태일때까지, dfs 가 실행된다. 즉, i번째 노드가 모두 방문된 상태이면 더이상 dfs 함수가 실행되지 않아서 종료되게 되는 알고리즘이다.

dfs(graph,1,visited)

