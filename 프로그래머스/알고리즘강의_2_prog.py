###.1 선형배열

# 일반적으로 배열이라 함은 같은 종류의 데이터가 줄지어 늘어져 있는 형태를 의미한다. 파이썬 에서는 이러한 선형배열을 리스트를 이용하여 일반적으로 표현한다.
L = [20,37,58,72,91]

L.pop(2)

print(L)

# 리스트의 요소의 개수인 길이와 상관없이 순식간에 상관없는 일은 O(1) 와 같이 상수시간으로 표현된다.
# 그러나 리스트의 배열의 중간에 원소를 삽입하거나 원소를 삭제하는 일의 경우는 리스트의 요소의 개수가 많으면 많을 수록 걸리는 시간이 커지게 된다.

L.insert(3,65)

print(L)

# index 3의 위치에 원소 65를 삽입하라는 프로그램으로 이경우 맨끝에 원소를 하나 덧붙이는 연산에 비해서 91,72를 리스트의 오른쪽으로 한칸씩 옮기는 동작을 해야하므로 걸리는 시간이 더 길게된다.

del(L[2])

print(L)

# 이경우도 마찬가지로 중간에 원소를 삭제하게 되면서 리스트의 72,91 요소값이 왼쪽으로 각각 한칸씩 움직여야 하므로 걸리는 시간이 더 길게 된다.

# 이처럼, 리스트의 길이가 길수록 시간이 오래 걸리게 되는 일은 리스트의 길이에 비례하는 선형 시간이라고 말할 수 있다. 예를 들면, 리스트의 요소가 매우 많은 리스트가 있는데 이경우 리스트의 맨 앞에 요소를 하나 추가하려고 하면 리스트의 크기 만큼 시간이 비례하여 오래 걸리게 된다. 이러한 경우는 선형시간이라고 말하고, O(n) 으로 표현한다.


###.2 리스트의 원소 탐색하기

# 리스트에 존재하는 원소를 찾아서 그 원소가 리스트의 어느 위치에 존재하는 지를 찾는 것을 원소 탐색하기라고 한다.

L_2 = ['Bob','Cat','Spam','Programmers']

print(L_2.index('Spam'))




