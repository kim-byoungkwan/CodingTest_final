###.1 재귀알고리즘

# 재귀함수란 하나의 함수에서 자신을 다시 호출하여 작업을 수행하는 것으로 생각보다 많은 종류의 문제가 재귀적으로 해결 가능하다.

def sum(n):

    return n + sum(n-1)

print(sum(12))

# 재귀함수를 호출할 때에는 종결조건이 매우 중요하다. 위와 같은 함수는 의미적으로 맞아 보이지만, 실제 실행결과에선 오류가 발생하는데, 함수의 종결조건을 설정하지 않았기 때문에 계속 재귀적으로 멈춤없이 자기 자신을 호출하기 때문에 함수가 끝나지 않기 때문이다.

# 위와같이 종결조건의 return 값에는 함수가 포함되어 있지 않고 n 값만 포함되어 있어서 재귀적인 함수의 호출이 발생하지 않게 된다.

def sum(n):

    if n <= 1:

        return n

    else:

        return n + sum(n-1)

print(sum(12))

# 따라서, 위와 같이 함수의 종결조건을 if/else 문을 사용하여 설정해주어 재귀함수가 종결될 수 있게 해주어야한다.

def sum(n):

    s = 0

    while n >= 0:

        s += n

        n -= 1

    return s

# 위의 함수는 재귀알고리즘의 iterative version이다.시간 효율성은 n의 값이 커질 수록 재귀함수는 함수의 반복횟수가 증가하므로 O(n) 이고, iterative version 또한 n이 커질 수록 반복문의 반복횟수가 증가하므로 O(n)이다.

def what(n):

    if n <= 1:

        return 1

    else:

        return n*what(n-1)

# n까지의 곱을 출력하는 재귀알고리즘, 즉 n! 를 구하는 재귀알고리즘이다.




