###.1 트리

# 스택, 큐와 같은 자료구조가 1차원 선형의 자료구조인 것과 달리 트리는 2차원의 자료구조이다.

# 트리란 정점(node)와 간선(edge)를 이용하여 데이터의 배치 형태를 추상화한 자료구조이다.

# 컴퓨터공학에서 트리는 일반적인 경우와 달리 뿌리가 위에 있고 그 뿌리로부터 뻗어나오는 잎과 가지가 아래방향으로 향하는 형태로 표현되어 있다.

# 뿌리노드(Root node)도 아니고, 리프(Leaf) 노드도 아닌 뿌리노드와 리프노드 사이에 존재하는 노드를 내부(Internal)노드라고 한다.

# 같은 부모노드로 부터 뻗어나와 형성된 자식노드들을 묶어서 서로 형제관계가 있다고 표현한다.

# 어떠한 부모노드의 부모노드를 조상노드라고 하고, 어떠한 자식노드의 자식노드를 후손노드라고 한다. 그러므로, 이러한 정의에 따라서 모든 노드는 뿌리노드의 후손노드로 규정할 수 있다.

# 뿌리노드의 레벨을 0이라고 정의하면, 뿌리노드의 자식노드는 레벨 1, 이 자식노드의 자식노드는 레벨 2라고 정의하게된다. 즉, 뿌리노드로 부터 연결된 간선의 숫자가 곧 어떠한 노드의 레벨인 것이다.

# 어떠한 트리의 높이는 모든 노드중에서 가장 높은 레벨을 갖는 노드의 레벨 + 1로 그 트리의 높이를 정의한다.

# 트리에 존재하는 어떠한 노드의 차수는 노드의 자식노드의 개수로 결정된다. 즉, 그 노드가 갖는 서브트리의 수로 결정된다고 말할 수 있는 것이다.

# 리프노드는 자식노드가 존재하지 않으므로 차수 degree 는 0으로 결정된다.

# 어떠한 한 노드의 자식노드는 여러개일 수 있지만, 부모노드는 오직 하나 존재한다.

# 만약 어떠한 트리에 존재하는 모든 노드의 차수가 2이하인 경우 이러한 트리를 이진트리라고 한다.

# 이러한 이진트리의 정의에 따르면 이진트리는 본질적으로 재귀적인 성질을 갖고 있다. 왜냐하면, 이진트리의 루트로부터 발생한 왼쪽 서브트리와 오른쪽 서브트리 또한 이진트리의 형태를 갖고 있고, 왼쪽의 서브트리에 존재하는 서브트리 또한 또 다시 이진트리의 형태를 갖고 있기 때문이다. 그런데 이때 가장 중요한 것은 이진트리가 재귀적으로 완벽히 종결되기 위해선 노드를 갖고 있지 않은 빈트리 또한 이진트리라고 정의해줘야 하는 것이다. 그렇지 않으면 이진트리의 재귀적조건이 종결되지 않아 이진트리가 성립되지 않기 때문이다.

# 이러한 이진트리 중에 모든 레벨에서 노드들이 모두 2개씩 채워져있는 이진트리를 포화이진트리라고 한다. 그러므로, 이러한 포화이진 트리는 높이가 k일 경우 존재하는 노드의 개수는 2^k - 1로 결정되게 된다.

# 만약 높이가 k인 이진트리가 레벨 k-2 까지의 모든 노드가 2개의 자식을 가진 트리이고, 레벨 k-1에서는 왼쪽부터 노드가 순차적으로 채워져 있는 이진트리인 경우, 이를 완전 이진트리라고한다.







