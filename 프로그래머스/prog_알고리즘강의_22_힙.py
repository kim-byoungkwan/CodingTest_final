###.1 힙

# 힙(Heap)이란 이진 트리의 한 종류로서, 트리에 존재하는 모든 뿌리노드가 언제나 최댓값 또는 최솟값을 가지는 트리이다. 이때, 최댓값을 가지는 힙을 최대힙, 최솟값을 가지는 힙을 최소힙이라고 정의한다. 즉, 트리에 존재하는 모든 부모노드는 자식노드의 값보다 항상 크거나 작은값을 갖고 있는 트리가 힙인 것이다.

# 이러한 힙의 정의를 만족하는 트리는 이진탐색트리처럼 부모노드의 왼쪽 노드는 부모노드의 값보다 작고, 오른쪽 노드는 부모노드의 값보다 큰 순서로 정렬되어 있지 않다. 그러므로, 힙에선 특정 키 값을 가지는 원소를 이진탐색트리에서 처럼 빠르게 검색하기는 힘들다.

# 또한 힙은 이진탐색트리의 경우와는 달리 완전탐색트리여야만 하는 조건을 갖는다. 그러므로, 힙에서 노드의 추가/삭제 동작은 마지막 노드에서만 이루어진다. 이러한 힙의 완전탐색트리적인 성격으로 인해 힙을 배열을 이용하여 적절하게 표현할 수 있다.

# 힙의 삽입 연산의 시간복잡도는 아무리 오래걸려도 O(logn) 으로 결정된다.

class MaxHeap:

    def __init__(self):

        self.data = [None]

# 힙을 배열로 표현할 때 0번 인덱스는 None로 정의하기로 약속했으므로, 위와같이 data 변수가 [None]로 정의되는 것이다.

    def insert(self,item):

        self.data.append(item)

        index = len(self.data)-1

# 힙에는 항상 0번째 인덱스에 None 값이 할당되어 있고, 1번째 인덱스부터 값이 할당되게 된다. 즉, len() 메소드의 결과 0번째 인덱스의 None 값이 개수에 포함되게 되므로, 실질적으로 내가 원하는 값의 인덱스를 도출하기 위해서는 len() 메소드를 취한 결과값에 -1을 취해주어야한다.

        while index > 1:

# index 값이 1인 경우는 추가된 노드 item 자체가 뿌리노드인 경우이므로, 값의 변경이 일어나지 않기때문에 index > 1 인 범위에서 인덱스를 고려해주는 것이다.

            parent = index // 2

            if self.data[index] > self.data[parent]:

                self.data[index], self.data[parent] = self.data[parent], self.data[index]

                index = parent

            else:

                break
















